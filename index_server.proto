package indexserver;

option java_outer_classname = "IndexServerProtos";

message IndexFormat {
  enum DimensionType {
    INT32 = 0;
    UINT32 = 1;
    INT64 = 2;
    UINT64 = 3;
    IEE754_SINGLE = 100;
    IEE754_DOUBLE = 101;
  }
  
  required DimensionType type = 1;
  
  message Dimension {
    optional string name = 1;
  }
  
  repeated Dimension dimension = 2;
}

message Point {
  extensions 100 to 299;
}

message Int32Point {
  repeated int32 data = 1 [packed = true];
  extend Point {
    optional Int32Point point = 100;
  }
}

message UInt32Point {
  repeated uint32 data = 1 [packed = true];
  extend Point {
    optional UInt32Point point = 101;
  }
}

message Int64Point {
  repeated int64 data = 1 [packed = true];
  extend Point {
    optional Int64Point point = 102;
  }
}

message UInt64Point {
  repeated uint64 data = 1 [packed = true];
  extend Point {
    optional UInt64Point point = 103;
  }
}

message IEE754SinglePoint {
  repeated float data = 1 [packed = true];
  extend Point {
    optional IEE754SinglePoint point = 104;
  }
}

message IEE754DoublePoint {
  repeated double data = 1 [packed = true];
  extend Point {
    optional IEE754DoublePoint point = 105;
  }
}

message Void {
}

message UseStore {
  required string location = 1;
}

message QueryOptions {
  optional int32 limit = 1 [default = 1000];
  optional int32 offset = 2 [default = 0];
}

message BBoxQuery {
  required QueryOptions options = 1;
  required Point from = 2;
  required Point to = 3;
}

message QueryResult {
  optional uint64 exact_total = 1;
  repeated IndexRecord values = 2;
}

service IndexQueryService {
  rpc useStore(UseStore) returns (Void);
  rpc bboxQuery(BBoxQuery) returns (QueryResult);
}

message CreateStore {
  required string location = 1;
  required IndexFormat format = 2;
  optional bool overwrite = 3 [default = false];
}

message IndexRecord {
  required Point key = 1;
  required bytes value = 2;
}

message BuilderData {
  repeated IndexRecord records = 1;
}

message BuilderProgress {
  optional double progress = 1;
}

service IndexBuilderService {
  rpc createStore(CreateStore) returns (Void);
  rpc feedData(BuilderData) returns (Void);
  rpc buildIndex(Void) returns (Void);
  rpc getProgress(Void) returns (BuilderProgress);
}
